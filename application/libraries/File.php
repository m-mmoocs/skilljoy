<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');define('TEMP_DIR',$_SERVER['DOCUMENT_ROOT'].'/staging/_/temp/');define('UPLOAD_DIR',$_SERVER['DOCUMENT_ROOT'].'/staging/_/images/uploaded/');class File {     private $allowed_types = array('image/png','image/jpg','image/jpeg','image/gif');     private $max_size = 2000000;     public $files = array();     public $errors = array();          function __construct($files=NULL) {         if($files){             $this->files = json_decode($files,true);//             echo "<pre>".print_r($this->file,true)."</pre>"; die;         }     }          public function saveFile($file){         if($this->checkFile($file)){             if(move_uploaded_file($file['tmp_name'], UPLOAD_DIR.$file['name'])){                 $filepath = str_replace($_SERVER['DOCUMENT_ROOT'],'',UPLOAD_DIR.$file['name']);                 return $filepath;             }         }         return FALSE;     } // end function saveFile               public function errors(){         if(count($this->errors)===0) return false;         else return $this->errors;     }          public function getJSON(){//         $obj->file = $this->file;         $obj->files = $this->files;         if(count($this->errors))            $obj->errors = $this->errors;         return json_encode($obj);     }          private function checkFile($file){         $state = true;                  if($file["error"] !== 0){            $state = false;             $this->errors['error']='File upload error.';//            $this->errors['error']=$file["error"];         }elseif($file["size"] > $this->max_size){            $state = false;            $this->errors['size']=$file['size'].' bytes. File too large.';         }elseif(!in_array($file["type"], $this->allowed_types)){            $state = false;             $this->errors['type']=$file['type'].' is not an allowed type.';         }         return $state;     } // end function checkFile               }